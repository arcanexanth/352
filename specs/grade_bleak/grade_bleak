#!/usr/bin/env zsh

# ---------------------------------------------------------------------------- 

# Assert that each file has the required tokens.
function check_tokens() {
  file=$1
  shift
  for i in $*; do
    grep -- $i $file >/dev/null
    if [[ $? -ne 0 ]]; then
      echo "Yikes! Expected $i in $file not found." >& 2
      exit 1
    fi
  done
}

# ---------------------------------------------------------------------------- 

iskey=0
isgrader=0
onlylater=0
while getopts kgl opt; do
  case $opt in
    (k)
      iskey=1
      ;;
    (g)
      isgrader=1
      ;;
    (l)
      onlylater=1
      ;;
  esac
done

graderdir=${0:A:h}
srcdir=$(pwd)
libdir=$srcdir/../.tmp
basedir=${srcdir:t}
tmp="${srcdir}/.tmp"
name="bleak"

mkdir -p $libdir

# Assert that we're in the right directory.
if [[ $basedir != $name ]]; then
  echo "Oh no! The grader must be run from the $name directory." >&2
  exit 1
fi

# ---------------------------------------------------------------------------- 

# Assert that all required files exist.
expected_files=(BleakVirtualMachine.h BleakVirtualMachine.cpp Makefile main.cpp)
for i in $expected_files; do
  if [[ ! -f $i ]]; then
    echo "Whoops! Expected file $i not found." >&2
    exit 1
  fi
done

check_tokens Makefile -g clean 

# ---------------------------------------------------------------------------- 

if [[ $isgrader -eq 0 ]]; then
  # Assert that makefile builds
  make 2>&1 >/dev/null
  if [[ ! -f BleakVirtualMachine.o ]]; then
    echo "Uh oh! No BleakVirtualMachine.o found after running make." >&2
    exit 1
  fi

  make clean 2>&1 >/dev/null
  if [[ -f BleakVirtualMachine.o || -f main.o ]]; then
    echo "Uh oh! Object files (*.o) found after running \"make clean\"." >&2
    exit 1
  fi
  make 2>&1 >/dev/null
fi

# ---------------------------------------------------------------------------- 

gtestdir=$libdir/googletest
if [[ ! -d $gtestdir ]]; then
  echo "Downloading Google Test..."
  if [[ $isgrader -eq 0 ]]; then
    out=/dev/stdout
  else
    out=/dev/null
  fi
  (cd $libdir &&
   git clone https://github.com/google/googletest.git) >& $out
  echo
fi

if [[ ! -f $gtestdir/build/lib/libgtest.a ]]; then
  echo "Compiling Google Test..."
  (cd $gtestdir &&
   mkdir -p build &&
   cd build &&
   cmake -DCMAKE_INSTALL_PREFIX=. .. &&
   make &&
   make install > /dev/null)
  echo
fi

# ---------------------------------------------------------------------------- 

CPP=g++
CFLAGS="-std=c++11"

# ---------------------------------------------------------------------------- 

echo "Compiling your code and the first batch of unit tests..."
${CPP} ${=CFLAGS} -g -I. -I$gtestdir/build/include -o $libdir/test_bleak1 BleakVirtualMachine.cpp $graderdir/unit_tests1.cpp $gtestdir/build/lib/*.a -lpthread -lm
if [[ $? -ne 0 ]]; then
  echo "Uh oh. Compiling your *.cpp files against the first batch of unit tests failed."
  exit 1
fi
echo "Compiled successfully."
echo

echo "Executing tests to qualify for later week submission..."
gotlater=0
$libdir/test_bleak1
if [[ $? -ne 0 ]]; then
  echo "Oof. Not all unit tests in the first batch passed."
  exit 1
fi
echo "Qualified for later week submission."
echo
gotlater=1

if [[ $onlylater -eq 1 ]]; then
  exit 2
fi

echo "Compiling your code and the second batch of unit tests..."
${CPP} ${=CFLAGS} -g -I. -I$graderdir -I$gtestdir/build/include -o $libdir/test_bleak2 BleakVirtualMachine.cpp $graderdir/unit_tests2.cpp $gtestdir/build/lib/*.a -lpthread -lm
if [[ $? -ne 0 ]]; then
  echo "Uh oh. Compiling your *.cpp files against the second batch of unit tests failed."
  exit 2
fi
echo "Compiled successfully."
echo

mkdir -p $libdir/cases
\cp -rf $graderdir/cases/* $libdir/cases
(cd $libdir && $libdir/test_bleak2)
if [[ $? -ne 0 ]]; then
  echo "Oof. Not all unit tests in the second batch passed."
  exit 2
fi
echo

tests=(
  generateds/generated_arithmetic_blank.cpp
  generateds/generated_count_by_3_to_40_blank.cpp
  generateds/generated_decrement_all_decrement_all.cpp
  generateds/generated_eg1_eg1.cpp
  generateds/generated_indirect_blank.cpp
  generateds/generated_jzilch_blank.cpp
  generateds/generated_jzilch_not_blank.cpp
  generateds/generated_samesies_samesies.cpp
  generateds/generated_sign_sign.cpp
  generateds/generated_tail8_tail8_10.cpp
  # generateds/generated_tail8_tail8_57.cpp
  generateds/generated_triple_triple.cpp
  generateds/generated_zero_for_each_input_zero_for_each_input.cpp
)

for test in $tests; do
  echo "Compiling your code and the generated unit test $test..."
  tag=${test:t:r}
  ${CPP} ${=CFLAGS} -g -I. -I$graderdir -I$gtestdir/build/include -DGENERATED=$test -o $libdir/test_$tag BleakVirtualMachine.cpp $graderdir/unit_tests_generated.cpp $gtestdir/build/lib/*.a -lpthread -lm
  if [[ $? -ne 0 ]]; then
    echo "Uh oh. Compiling your *.cpp files against the second batch of unit tests failed."
    exit 2
  fi
  echo "Compiled successfully. Let's run the tests..."
  echo

  (cd $libdir && $libdir/test_$tag)
  if [[ $? -ne 0 ]]; then
    echo "Oof. Not all unit tests in the $tag test passed."
    exit 2
  fi
  echo
done

# ---------------------------------------------------------------------------- 

if [[ $hay_trouble -eq 1 ]]; then
  exit 2
fi

# Assert that a commit and push has happened or is about to happen.
if [[ $isgrader -eq 0 ]]; then
  # echo -n "Did you post your example program on Piazza in folder bleak_share? y or [n]? "
  # read answer
  # if [[ "$answer" != "y" ]]; then
    # exit 2
  # fi
  # echo

  echo "Have you added any unadded files, committed, and pushed to Bitbucket?"
  echo -n "Run \"git status\" if you don't know. y or [n]? "
  read answer
  if [[ "$answer" != "y" ]]; then
    exit 2
  fi
fi

exit 0
